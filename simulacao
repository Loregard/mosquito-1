#####################################################################
## Individual-based re-implementation in R of:
##
## Rinke, K. & Petzoldt, T. (2003). Effects of temperature and food
## on individual growth and reproduction of Daphnia and their 
## consequences on the population level. Limnologica 33: p293-304.
##
#####################################################################

##Adaptar o codigo e ver quantos GrausDia precisa cada estadio
##===================================================================
## 1. Define the Model as a simecol object
##===================================================================
library(simecol)
##-------------------------------------------------------------------
## 1.1 Derive a new class from the simecol base class simObj
##-------------------------------------------------------------------



setClass("indbasedModel",
         representation(
           parms  = "list",
           init   = "data.frame"
         ),
         contains = "simObj"
)

##-------------------------------------------------------------------
## 1.2 Define the model object
##-------------------------------------------------------------------

ibm_daphnia = new("indbasedModel",
                  main = function(time, init, parms) { #para cada vez q ela ser chamada
                    init = live(init, parms)
                    init = survive(init, parms)
                    init = hatch(init, parms)
                    #init = death(init)
                    init  #retorna todos os inits acima
                    #qual seria substituido
                  },
                  equations = list(
                    newdaphnia = function(n) { 
                      if (n>0) { #se nasceu no dia
                        data.frame(age = rep(0, n), fase = 1, eggs = 0, gdd = 0, ovoposicao = 0) 

                      } else { #se nao nasceu no dia
                        NULL
                      }
                    },
                    #se tem chuva, o ovo acumula os graus dia, se n tem n soma 
                    
                    #considerar somente metade porque somente metade é femea
                    
                    #adicionar cada uma das fases aqui dentro com a probabilidade de morte
                    live = function(inds, parms){
                      with(parms,{
                        ninds       = nrow(inds) #fala o numero de individuos atraves da 
                        # contagem do numero de linhas na tabela
                        
                        
                        inds$age    = inds$age + DELTAT
                        
                        inds[inds$fase==1,'gdd'] <- inds[inds$fase==1,'gdd'] + (parms$temp-parms$tb[1])
                        
                        inds[inds$fase==2,'gdd'] <- inds[inds$fase==2,'gdd'] + (parms$temp-parms$tb[2])
                        
                        inds[inds$fase==3,'gdd'] <- inds[inds$fase==3,'gdd'] + (parms$temp-parms$tb[3])
                        
                        inds[inds$fase==4,'gdd'] <- inds[inds$fase==4,'gdd'] + (parms$temp-parms$tb[4])
                        
                        OpL  <- which(inds$fase == 1 & inds$gdd>=305.8) #ovo para larva
                        inds$fase[OpL] = 2 #evolui
                        inds$gdd[OpL] = 0 #zera graus dia de quem mudou de fase
                        LpP  <- which(inds$fase == 2 & inds$gdd>=433.5) #Larva para Pupa
                        inds$fase[LpP] = 3 #evolui
                        inds$gdd[LpP] = 0 #zera graus dia de quem mudou de fase
                        PpA  <- which(inds$fase == 3 & inds$gdd>=465.6) #Pupa para Adulto
                        inds$fase[PpA] = 4 #evolui
                        inds$gdd[PpA] = 0 #zera graus dia de quem mudou de fase
                        
                        # ****fazer ovoposicao****
                        #por enquanto ele esta adicionando e colocando novamente ovos ate a morte do mosquito
                        
                        #verifica se o individuo esta na fase 4
                         #gera um numero random de eggs de 40-200
                        inds #retorna os resultados
                      })},
                    survive  = function(inds, parms){ 
                      diasfase = c(4.1, 6.6, 2.4, 12.4) # médias de dias por fase n vamos usar
                      probmorte = c(0.383, 0.075, 0.062, 0.02) # probabilidade de morte em cada fase
                      probmorte = probmorte / diasfase # ajustado por que os indivíduos são testados para morte a cada dia, e não a cada fase
                      subset(inds, runif(inds$age) > probmorte[inds$fase] & inds$age <= parms$maxage & parms$agua != 0 |
                               runif(inds$age) > probmorte[inds$fase] & inds$age <= parms$maxage & parms$agua == 0 & inds$fase == 1)
                      
                    },
                    #colocar o death aqui no survive
                    #se um individuo passa
                    hatch = function(inds, parms) {
                      newinds = NULL
                      with(parms, {
                        inds[inds$fase==4,'eggs'] <- inds[inds$fase==4,'eggs'] + round(runif(1,40,200))
                        inds[inds$fase==4,'ovoposicao'] <- inds[inds$fase==4,'ovoposicao']
                        have.neo  = 0
                        new.neo   = 0
                        have.neo  = which(inds$eggs > 0)
                        #se o individuo tem ovos e estao acima do trashhold para eclodir, retorna T e F 
                        eggs      = inds$eggs[have.neo] #seleciona somente os 
                        new.neo   = sum(eggs) # soma o total de ovos criados
                        inds$eggs[have.neo]   = 0 # zera os q tinham ovos
                        newinds = newdaphnia(new.neo) # cria novas daphnias 
                        rbind(inds, newinds) # adiciona na lista (data.frame) de individuos
                      })
                    }
                  ),parms = list(
                    maxage      = 44,       # (d)
                    # constant environmental conditions
                    temp        = 26, #runif(1,25,40),       # (deg C)
                    agua = 11 ,#runif(1,0,15),
                    tb = c(2.9, 8.6, 10.8, 3.43)
                  ),                      
                  init = data.frame(age=0, fase=4, eggs=150, gdd=0, ovoposicao = 0),
                  times = c(from=0, to=60, by=1),
                  solver = "myiteration"
)

##-------------------------------------------------------------------
## 1.3 Optionally define a user provided solver function that stores
##     the data more model specific than the default iteration
##-------------------------------------------------------------------

myiteration = function(y, times = NULL, func = NULL, parms = NULL,
                       animate = FALSE, ...) {
  observer = function(res) { 
    # eggs, size, age, eggage
    number   = nrow(res) 
    meanfase = mean(res$fase)
    meanage  = mean(res$age)
    meaneggs = mean(res$eggs)
    c(number=number, meanfase=meanfase, meanage=meanage, meaneggs=meaneggs)
  }
  init              = y@init
  times             = fromtoby(y@times)
  func              = y@main
  parms             = y@parms
  inputs            = y@inputs
  equations         = y@equations
  equations         = addtoenv(equations)
  environment(func) = environment()
  parms$DELTAT = 0
  res = observer(init)
  out = res
  for (i in 2:length(times)) { #comeca em 2 porque vetores comecam em 1 inves de 0
    time = times[i]
    parms$DELTAT = times[i] - times[i-1]
    init = func(time, init, parms)
    res  = observer(init)
    out  = rbind(out, res)
  }
  row.names(out) = NULL
  out = cbind(times, out)
  as.data.frame(out)
}

##-------------------------------------------------------------------
## 1.4 Define a user specified plot function according to the
##     data structure stored by "myiteration"
##-------------------------------------------------------------------
setMethod("plot", c("indbasedModel", "missing"), function(x, y, ...) {
  opar = par(no.readonly=TRUE)
  on.exit(par(opar))
  par(mfrow=c(2, 2))
  o = out(x)
  plot(o$times, o$meaneggs, type="l", xlab="Time", ylab="Eggs per individual")
  plot(o$times, o$meanage,  type="l", xlab="Time", ylab="Mean age (d)")
  plot(o$times, o$number,   type="l", xlab="Time", ylab="Abundance")
  plot(o$times, o$number,   type="l", xlab="Time", ylab="Abundance", log="y")
})

##===================================================================
## 2. Simulate the Model
##===================================================================

##solver(ibm_daphnia) = "myiteration"
# procurar entender o "sim"
ibm_daphnia = sim(ibm_daphnia)
plot(ibm_daphnia)
